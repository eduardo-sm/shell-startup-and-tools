#!/usr/bin/env bash

# This file is meant to be sourced in .bashrc or .zshrc

# Identify if command exist
is_command () {
	command -v "$1" &> /dev/null
}

if is_command rg; then
  # Include '--hidden' to show hidden files
  # Include '--no-ignore' to show ignored files like the ones listed in .gitignore
  # Inlcude '-uu' for both --hidden and --no-ignore

  export FZF_DEFAULT_COMMAND='rg --files --follow --glob "!node_modules" --glob "!.git"'
fi

if is_command fd; then
  # List arguments for exclusion
  fd_exclude=(
    --exclude .git
    --exclude node_modules
    --exclude Library
    --exclude .npm
    --exclude .nvm
    --exclude .cache
  )

  # Include '--hidden' to show hidden files
  # Include '--no-ignore' to show ignored files like the ones listed in .gitignore
  # Inlcude '--unrestricted' for both --hidden and --no-ignore

  export FZF_CTRL_T_COMMAND="fd --type f --follow ${fd_exclude[@]}"
  export FZF_ALT_C_COMMAND="fd --type d --follow ${fd_exclude[@]}"

  # command for listing path candidates.
  _fzf_compgen_path () {
    fd --hidden --follow --exclude ".git" --exclude "node_modules" . "$1"
  }

  # Use fd to generate the list for directory completion
  _fzf_compgen_dir () {
    fd --type d --hidden --follow --exclude ".git" --exclude "node_modules" . "$1"
  }
fi

# The pbcopy can be installed with scoop in windows
# $ scoop bucket add extras
# $ scoop install pasteboard
# On linux it can be replaced by xsel
# xsel -ib
if is_command pbcopy; then
  export FZF_CTRL_R_OPTS="
    --preview 'echo {}' --preview-window up:3:hidden:wrap
    --bind 'ctrl-/:toggle-preview'
    --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
    --color header:italic
    --header 'Press CTRL-Y to copy command into clipboard'"
elif is_command xsel; then
  export FZF_CTRL_R_OPTS="
    --preview 'echo {}' --preview-window up:3:hidden:wrap
    --bind 'ctrl-/:toggle-preview'
    --bind 'ctrl-y:execute-silent(echo -n {2..} | xsel -ib)+abort'
    --color header:italic
    --header 'Press CTRL-Y to copy command into clipboard'"
else
  export FZF_CTRL_R_OPTS="
    --preview 'echo {}' --preview-window up:3:hidden:wrap
    --bind 'ctrl-/:toggle-preview'
    --color header:italic
    --header 'Press CTRL-/ to open preview'"
fi

export FZF_ALT_C_OPTS="
  --preview 'ls -AF --color=always {-1} 2> /dev/null'
  --bind 'ctrl-/:change-preview-window(down|hidden|),alt-up:preview-page-up,alt-down:preview-page-down,ctrl-s:toggle-sort'"

export FZF_CTRL_T_OPTS="
  --preview 'if [ -f {} ]; then
      bat -pp --color=always --style=numbers {}
    else
      "'echo "Path: $(realpath {})"'"
      echo ''
      ls -AFL --color=always {} 2> /dev/null
    fi'
  --bind 'ctrl-/:change-preview-window(down|hidden|),alt-up:preview-page-up,alt-down:preview-page-down,ctrl-s:toggle-sort'"

if [[ $(uname) =~ Darwin ]]; then

  # Fix alt-c keybinding in macos by binding the
  # 'ç' symbol to call the fzf-cd-widget function
  if [ -n "$ZSH_VERSION" ]; then
    bindkey "ç" fzf-cd-widget
  elif [ -n "$BASH_VERSION" ]; then
    bind -m emacs-standard '"ç": " \C-b\C-k \C-u`__fzf_cd__`\e\C-e\er\C-m\C-y\C-h\e \C-y\ey\C-x\C-x\C-d"'
    bind -m vi-command '"ç": "\C-z\ec\C-z"'
    bind -m vi-insert '"ç": "\C-z\ec\C-z"'
  fi

  # Other options include sending the 'Meta' key
  # 1) Esc-c
  # 2) Ctrl-[ c

  # Or changing the way the meta key is interpreted in the
  # configuration of your terminal emulator.
fi
