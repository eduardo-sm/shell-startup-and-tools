#!/usr/bin/env bash

# This file is meant to be sourced in .bashrc or .zshrc

# This function uses an additional package called 'jq'
# Select a command to run with 'npm run'
fnr () {
  if ! [ -f package.json ]; then
    echo "No package.json in dir $(pwd)"
    return 1
  fi

  if ! command -v "jq" &> /dev/null; then
    echo "Dependency jq not found. Please install before running."
    return 1
  fi

  local query="${*}"
  local selection="$(cat package.json |
    jq -r '.scripts | keys[]' |
    sort |
    fzf --query "$query" --height 50% --min-height 20 --border)"

  if [ -z "$selection" ]; then
    return 1
  fi

  npm run "$selection"
}

# Show list of current changed files
bdiff () {
  git diff --name-only --relative --diff-filter=d | xargs bat --diff
}

# Show git log and allow see diffs of commits
fshow () {
  local out shas sha q k
  while out=$(
      git log --graph --color=always \
          --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
      fzf --ansi --multi --no-sort --reverse --query="$q" \
          --print-query --expect=ctrl-d --bind=ctrl-s:toggle-sort); do
    q=$(head -1 <<< "$out")
    k=$(head -2 <<< "$out" | tail -1)
    shas=$(sed '1,2d;s/^[^a-z0-9]*//;/^$/d' <<< "$out" | awk '{print $1}')
    [ -z "$shas" ] && continue
    # If you have delta, you can do
    # git diff --color=always $shas | delta
    # https://github.com/dandavison/delta
    if [ "$k" = ctrl-d ]; then
      git diff --color=always $shas | less -R
    else
       for sha in $shas; do
        git show --color=always $sha | less -R
      done
    fi
  done
}

# Show git log and see diffs in preview
fsw () {
  git log \
    --graph \
    --format='%C(auto)%h%d %s %C(white)%C(bold)%cr' \
    --color=always \
    "$@" |
  fzf \
    --ansi \
    --reverse \
    --tiebreak=index \
    --no-sort \
    --bind ctrl-s:toggle-sort,ctrl-/:toggle-preview,alt-up:preview-page-up,alt-down:preview-page-down \
    --preview 'f () { set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}"); [ $# -eq 0 ] || git show --color=always $1; }; f {}'
}

# Select a file and open it in your default editor
fed () {
  local location="${1:-$HOME}"
  local query="${@:3}"
  local pattern="."
  local editor="${EDITOR:-vim}"
  if ! [ -d "$location" ]; then
    pattern="$location"
    location="$HOME"
  fi
  local selection=$(fd -L -tf "$pattern" "$location" |
    fzf --height 50% --min-height 20 --border \
      --bind ctrl-/:toggle-preview,alt-up:preview-page-up,alt-down:preview-page-down \
      --header 'Press CTRL-/ to toggle preview' \
      --preview "bat --color=always --style=numbers {}" \
      --header "(ctrl-/) Search in: $location" \
      --query "$query")
  if [ -z "$selection" ]; then
    return
  fi
  if [ -n "$2" ] && [ "$2" != "-" ]; then
    editor="$2"
  fi
  $editor "$selection"
}

# Add files to stage area
fadd () {
  # Check git repository
  git rev-parse HEAD > /dev/null 2>&1 || return

  local INITIAL_QUERY="${*:-}"
  local selection=($(git -c color.status=always status --short |
    fzf \
      --min-height 20 --border \
      -m --ansi --nth 2..,.. \
      --bind "ctrl-/:change-preview-window(down|hidden|),alt-up:preview-page-up,alt-down:preview-page-down,ctrl-s:toggle-sort" \
      --query "$INITIAL_QUERY" \
      --preview 'if [ -f {-1} ]; then
        git diff --color=always -- {-1} |
        sed 1,4d |
        bat -p --color=always
        bat --color=always {-1};
      else
        ls -aF --color=always {-1} 2>/dev/null || echo "Cannot display file"
      fi' |
    cut -c4- | sed 's/.* -> //'))

  if [ -n "$selection" ]; then
    git add "${selection[@]}"
  fi
}

# Checkout to a different branch
fco () {
  # Check git repository
  git rev-parse HEAD > /dev/null 2>&1 || return

  local INITIAL_QUERY="${*:-}"

  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf \
    --min-height 20 --border \
    -m --ansi --nth 2..,.. \
    --bind "ctrl-/:change-preview-window(down|hidden|),alt-up:preview-page-up,alt-down:preview-page-down,ctrl-s:toggle-sort" \
    --ansi --multi --tac --preview-window right:70% \
    --query "$INITIAL_QUERY" \
      --preview '
        git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} |
          cut -d" " -f1)' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'


  if [ -n "$selection" ]; then
    git checkout "${selection//origin\//}"
  fi
}

# Requires ripgrep and fzf
# Find a file using ripgrep, change to fzf for narrow results, open selection in vim
rfv () {
  # Use env variable to setup an editor or default to nvim
  local editor="${EDITOR:-vim}"
  # Switch between Ripgrep launcher mode (CTRL-R) and fzf filtering mode (CTRL-F)
  local RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case --no-ignore -g "'!node_modules'" -g "'!.git'" --hidden "
  local INITIAL_QUERY="${*:-}"
  IFS=: read -ra selected < <(
    FZF_DEFAULT_COMMAND="$RG_PREFIX $(printf %q "$INITIAL_QUERY")" \
    fzf --ansi \
      --color "hl:-1:underline,hl+:-1:underline:reverse" \
      --disabled --query "$INITIAL_QUERY" \
      --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
      --bind "ctrl-f:unbind(change,ctrl-f)+change-prompt(2. fzf> )+enable-search+clear-query+rebind(ctrl-r)" \
      --bind "ctrl-r:unbind(ctrl-r)+change-prompt(1. ripgrep> )+disable-search+reload($RG_PREFIX {q} || true)+rebind(change,ctrl-f)" \
      --prompt '1. Ripgrep> ' \
      --delimiter : \
      --header '╱ CTRL-R (Ripgrep mode) ╱ CTRL-F (fzf mode) ╱' \
      --preview 'bat --color=always {1} --highlight-line {2}' \
      --preview-window 'up,60%,border-bottom,+{2}+3/3,~3'
  )
  [ -n "${selected[0]}" ] && "$editor" "${selected[0]}" "+${selected[1]}"
}

# Find text in files with preview
fif () {
  if [ ! "$#" -gt 0 ]; then
    echo 'Need a string to search for!'
    return 1;
  fi

  rg --files-with-matches --no-messages "$1" |
    fzf \
      --bind "ctrl-/:change-preview-window(down|hidden|),alt-up:preview-page-up,alt-down:preview-page-down" \
      --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

# Group common used fzf configurations
fzf-defaults () {
  fzf --height 50% --min-height 20 --border \
    --bind "ctrl-/:change-preview-window(down|hidden|),alt-up:preview-page-up,alt-down:preview-page-down,ctrl-s:toggle-sort" \
    --header 'Press CTRL-/ to toggle preview' \
    "$@"
}

# Change directory to a selection in the directory stack
# Requires to add directories first with pushd
fdirs () {
  local selection="$(dirs -v |
    fzf-defaults \
      --preview '
        echo "Path: {2..}"
        echo ""
        ls -AFL --color=always $(bash -c "echo "{2..})' |
    awk '{print $1}')"

  if [ -n "$selection" ]; then
    pushd "+$selection"
  fi
}

# Show environment variables
fenv () {
  local showValue=false

  if [ "$1" = '-v' ]; then
    showValue=true
  fi

  local tmpfile="$(mktemp)"
  # Cleanup file on exit
  trap "rm -- '$tmpfile'" EXIT

  while IFS='=' read -r -d '' n v; do
    printf "%s=%s\n" "$n" "${v//$'\n'}"
  done < <(env -0) > "$tmpfile"

  local copy_command=()

  if command -v pbcopy &> /dev/null; then
    copy_command=(
      --bind 'ctrl-y:execute-silent(printf \"%q\" {} | pbcopy)+abort'
      --header 'Press CTRL-Y to copy command into clipboard'
    )
  elif command -v xsel &> /dev/null; then
    copy_command=(
      --bind 'ctrl-y:execute-silent(printf "%q" {} | xsel -ib)+abort'
      --header 'Press CTRL-Y to copy command into clipboard'
    )
  fi

  cat -v "$tmpfile" |
    fzf-defaults \
    --preview 'printf "%q" {}' --preview-window up:3:hidden:wrap \
    --bind 'ctrl-/:toggle-preview' \
    --color header:italic \
    "${copy_command[@]}" |
    cut -d '=' -f "$(if [ "$showValue" = true ]; then echo "2-"; else echo "1"; fi)" |
    sed -E 's/^[[:space:]]*//' | sed -E 's/[[:space:]]*$//'
}

# Helper to get aliases and functions in the current shell
getShellAliasAndFunctions () {
  if [[ -n "$BASH" ]]; then
    {
      # BASH
      # Functions
      typeset -F | awk '{ if ( $3 !~ /_.+/) { print $3 } }';
      # Aliases
      alias | awk '{ split($2,o,"="); print o[1] }'
    }
  else
    {
      # ZSH
      # Functions
      print -l ${(ok)functions} |
        awk '{ if ($1 !~ /^_.+/) { print $1 } }';
      # Aliases
      # alias | cut -d '=' -f 1
      compgen -a
    }
  fi
}

# Show aliases and functions in current session
fcmd () {
  local available_commands="$(getShellAliasAndFunctions | sort)"
  local tmpfile="$(mktemp)"

  # Cleanup file on exit
  trap "rm -- '$tmpfile'" EXIT

  # Get the output of type and store it in tmpfile
  for cm in $(echo ${available_commands}); do
    echo ""
    type -f "$cm" 2>/dev/null || type "$cm" 2>/dev/null
  done > "$tmpfile"

  local copy_command=()

  if command -v pbcopy &> /dev/null; then
    copy_command=(
      --bind 'ctrl-y:execute-silent(echo -n {} | pbcopy)+abort'
      --header 'Press CTRL-Y to copy command into clipboard'
    )
  elif command -v xsel &> /dev/null; then
    copy_command=(
      --bind 'ctrl-y:execute-silent(echo -n {} | xsel -ib)+abort'
      --header 'Press CTRL-Y to copy command into clipboard'
    )
  fi

  echo "$available_commands" |
    fzf-defaults \
      --preview "
        rg -A 50 -B 1 -m 1 '^{} ' $tmpfile |
        bat -l bash --color=always -p -H 2" \
      --preview-window right:70% \
      $copy_command || return 0
}
